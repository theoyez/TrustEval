let runs=[];let sortKey=null;let sortAsc=true;function pct(x){return (x*100).toFixed(1)+'%';}
function render(){const tbody=document.querySelector('tbody');const q=(document.getElementById('filter')?.value||'').toLowerCase();const view=runs.filter(r=>!q||JSON.stringify(r).toLowerCase().includes(q));tbody.innerHTML=view.map(r=>`
<tr><td>${r.run_id}</td><td>${r.model??'—'}</td>
<td class="right">${pct(r.accuracy)}</td><td class="right">${pct(r.grounding)}</td><td class="right">${pct(r.safety)}</td><td class="right"><b>${pct(r.trust_score)}</b></td>
<td>${r.notes??'—'}</td><td>${r.report?`<a href="${r.report}">Report</a>`:'—'}</td></tr>`).join('');}
function applySort(key){if(sortKey===key)sortAsc=!sortAsc;else{sortKey=key;sortAsc=true}runs.sort((a,b)=>{const av=a[key],bv=b[key];if(typeof av==='number'&&typeof bv==='number')return sortAsc?av-bv:bv-av;return sortAsc?String(av||'').localeCompare(String(bv||'')):String(bv||'').localeCompare(String(av||''));});render();}
async function load(){const res=await fetch('leaderboard.json');const data=await res.json();runs=Array.isArray(data.runs)?data.runs.slice():[];document.getElementById('lastUpdated').textContent='Updated: '+(data.updated_at||'now');render();const map={'th-run':'run_id','th-model':'model','th-acc':'accuracy','th-gnd':'grounding','th-safe':'safety','th-trust':'trust_score'};Object.entries(map).forEach(([id,key])=>{const th=document.getElementById(id);if(th)th.addEventListener('click',()=>applySort(key));});const f=document.getElementById('filter');if(f)f.addEventListener('input',render);}window.addEventListener('DOMContentLoaded',load);